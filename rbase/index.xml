<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rbase-rsses on Curso-R</title>
    <link>/rbase/index.xml</link>
    <description>Recent content in Rbase-rsses on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Disponível sobre Licença MIT</copyright>
    <lastBuildDate>Fri, 03 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/rbase/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução</title>
      <link>/rbase/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/rbase/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A linguagem &lt;code&gt;R&lt;/code&gt; é intuitiva. Muita coisa sai do jeito certo no chute! Para ver um exemplo disso, é interessante começar fazendo do R uma grande calculadora.&lt;/p&gt;

&lt;p&gt;Mas antes disso, vamos aprender a mexer no RStudio!&lt;/p&gt;

&lt;hr /&gt;

&lt;!-- ## Exercícios --&gt;

&lt;!-- Pratique! Será que você consegue resolver os exercícios abaixo? --&gt;

&lt;!-- 1. Calcule o número de ouro no R. --&gt;

&lt;!-- $$ \frac{1 + \sqrt{5}}{2} $$ --&gt;

&lt;!-- 2. O que dá divisão de 1 por 0 no R? E -1 por 0?  --&gt;

&lt;!-- 3. Quais as diferenças entre `NaN`, `NULL`, `NA` e `Inf`? --&gt;

&lt;!-- 4. Tente mentalmente calcular o que dá a conta `5 + 3 * 10 %/% 3 == 15` no R, sem rodar. --&gt;

&lt;!-- 5. Adicionando apenas parênteses, faça a expressão acima retornar o resultado contrário. --&gt;

&lt;!-- 6. O que acontece se você rodar: --&gt;

&lt;!-- ```{r, eval = F} --&gt;

&lt;!-- x &lt;- 4 --&gt;

&lt;!-- if(x = 4) { --&gt;

&lt;!--   &#39;isso aqui apareceu&#39; --&gt;

&lt;!-- } --&gt;

&lt;!-- x --&gt;

&lt;!-- ``` --&gt;

&lt;!-- 7. Como você faria para que o código da pergunta anterior fizesse com que `&#39;isso aqui apareceu&#39;` fosse impresso no console mas nenhum erro aparecesse? --&gt;

&lt;!-- 8.  **Difícil**: Usando `for`, `if` e `else` escreva as seguintes frases no console: --&gt;

&lt;!-- ```{r, eval=FALSE} --&gt;

&lt;!-- &gt; 1 elefante(s) incomoda(m) muita gente --&gt;

&lt;!-- &gt; 2 elefante(s) incomoda(m) incomoda(m) muito mais --&gt;

&lt;!-- &gt; 3 elefante(s) incomoda(m) muita gente --&gt;

&lt;!-- &gt; 4 elefante(s) incomoda(m) incomoda(m) incomoda(m) incomoda(m) muito mais --&gt;

&lt;!-- ``` --&gt;

&lt;!-- *Dica*: Leia o help da função `paste` e preste atenção no argumento `collapse`. --&gt;

&lt;!-- 9. Crie um vetor com o nome `x` que contenha os números `1, 20, 40, 50, 60` no R. --&gt;

&lt;!-- 10. Crie um vetor com o nome `x` de 100 números aleatórios entre 0 e 1. --&gt;

&lt;!-- 11. Calcule a média do vetor criado na questão anterior. --&gt;

&lt;!-- 12. Crie um vetor com 100 elementos. 99 deles são números aleatórios entre 0 e 1 e o último elemento tem o valor `NA`. Calcule também a média deste vetor. --&gt;

&lt;!-- *Dica*: Olhe atentamente os argumentos da função `mean`. --&gt;

&lt;!-- 13. Crie uma função que calcula a média de um vetor. Use `for` ou `while` nesta função. --&gt;

&lt;!-- 14. Crie uma função que simule um dado, ou seja, gera aleatóriamente um número inteiro entre 1 e 6. --&gt;

&lt;!-- 15. Crie uma função que simula o lançamento de `n` dados, e devolve a soma de seus resultados. --&gt;

&lt;!-- 16. **Difícil** Faça um histograma dos resultados da soma de 3 dados. Isto é, crie um vetor com 1000 resultados que aconteceram após somar 3 dados. Em seguida faça o histograma. --&gt;

&lt;!-- **Esses exercícios possuem resposta [aqui](https://curso-r.github.io/verao2017/r-como-calculadora/respostas)** --&gt;

&lt;h2 id=&#34;rstudio&#34;&gt;RStudio&lt;/h2&gt;

&lt;p&gt;O RStudio é o melhor ambiente de desenvolvimento de R disponível. Você pode &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/preview/&#34;&gt;baixá-lo aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Muitas das ferramentas são aprendidas conforme o uso, e há bons materiais sobre o Rstudio na internet (por exemplo, &lt;a href=&#34;https://csgillespie.github.io/efficientR/set-up.html#rstudio&#34;&gt;esta página&lt;/a&gt;). Uma funcionalidade importante é a criação de projetos. Uma estrutura sugerida para a organização de um projeto é:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estrutura 1&lt;/strong&gt;. Por extensão de arquivo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nome_do_projeto/
  - .Rprofile   # códigos para rodar assim que abrir o projeto
  - R/          # Código R, organizado com a-carrega.R, b-prepara bd.R, c-vis.R, d-modela, ...
  - RData/      # Dados em formato .RData
  - csv/        # Dados em .csv
  - png/        # gráficos em PNG
  - nome_do_projeto.Rproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Estrutura 2&lt;/strong&gt;. Típico projeto de análise estatística.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;project/
  - README.Rmd   # Descrição do pacote
  - set-up.R     # Pacotes etc
  - R/           # Código R, organizado com 0-load.R, 1-tidy.R, 2-vis.R, ...
  - data/        # Dados (estruturados ou não)
  - figures/     # gráficos (pode ficar dentro de output/)
  - output/      # Relatórios em .Rmd, .tex etc
  - project.Rproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Estrutura 3&lt;/strong&gt;. Pacote do R (avançado).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;project/
  - README.md    # Descrição do pacote
  - DESCRIPTION  # Metadados estruturados do pacote e dependências
  - NAMESPACE    # importações e exportações do pacote
  - vignettes/   # Relatórios em .Rmd
  - R/           # Funções do R
  - data/        # Dados estruturados (tidy data)
  - data-raw/    # Dados não estruturados e arqs 0-load.R, 1-tidy.R, 2-vis.R, ...
  - project.Rproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ao abrir o RStudio, você verá 4 quadrantes. Observe a figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;figures/rstudio-editor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esses quadrantes representam o &lt;strong&gt;editor&lt;/strong&gt;, o &lt;strong&gt;console&lt;/strong&gt;, o &lt;strong&gt;environment&lt;/strong&gt; e o &lt;strong&gt;output&lt;/strong&gt;.  Eles vêm nesta ordem, e depois você pode organizá-los da forma que preferir. O R vive no quadrante &lt;strong&gt;console&lt;/strong&gt;!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;rmarkdown&#34;&gt;RMarkdown&lt;/h2&gt;

&lt;p&gt;O RMarkdown é um tipo de documento especial que contém tanto textos quanto códigos de R, tudo escrito em um mesmo lugar.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;markdown&lt;/em&gt; nada mais é do que um documento de texto com alguns padrões básicos de formatação, como negrito, itálico, títulos, subtítulos, itens e referências cruzadas. Já os &lt;em&gt;chunks&lt;/em&gt; são pedaços de códigos em R encapsulados por três crases (```). Os códigos são executados sempre que o documento é processado.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## ```{r}
## 
## isto é um chunk. 
## ```
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Nota
&lt;/p&gt;
&lt;p&gt;
Este site foi escrito em RMarkdown. Toda vez que aparecer exemplos de código de R é porque havia um chunk no .Rmd original.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Para produção de relatórios, o RMarkdown possui algumas vantagens, como:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Simplicidade e foco&lt;/strong&gt;. Permite ao usuário o foco na análise e não na formatação do documento.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versátil&lt;/strong&gt;. Pode ser utilizado para gerar documentos em $\LaTeX$, &lt;code&gt;Word&lt;/code&gt;, &lt;code&gt;HTML&lt;/code&gt; e apresentações em &lt;code&gt;beamer&lt;/code&gt;, &lt;code&gt;pptx&lt;/code&gt; e &lt;code&gt;HTML&lt;/code&gt; (de vários tipos). Pode ainda gerar sites, livros, dissertações de mestrado e até mesmo dashboards interativos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reprodutível&lt;/strong&gt;. O RMarkdown nada mais é que um arquivo de texto. Além disso, ele tenta te obrigar a fazer o documento mais autocontido possível. Assim, um documento &lt;code&gt;.Rmd&lt;/code&gt; é fácil de compartilhar e de ser utilizado pelo receptor. Lembre-se, o receptor pode ser o futuro você! Vale enfatizar que a reprodutibilidade é considerada como um dos princípios fundamentais da ciência. Então, só de usar RMarkdown, você já está colaborando com a ciência. :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexível&lt;/strong&gt;. É possível configurar e criar templates de análises para quaisquer tipos de aplicações e clientes. Os textos podem ser parametrizados por números que variam de versão para versão, mensalmente, por exemplo, tudo escrito somente em R.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Criar um RMarkdown novo no RStudio é fácil. Clique no botão de criar arquivo e selecione RMarkdown.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::include_graphics(&amp;quot;figures/criar_rmarkdown.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures/criar_rmarkdown.png&#34; alt=&#34;plot of chunk unnamed-chunk-20&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para detalhes sobre como utilizar o RMarkdown, leia  &lt;a href=&#34;http://r4ds.had.co.nz/r-markdown.html&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://rmarkdown.rstudio.com/lesson-1.html&#34;&gt; aqui&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;r-como-calculadora&#34;&gt;R como calculadora&lt;/h2&gt;

&lt;p&gt;Pelo console, é possível executar qualquer comando do R.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:30
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
## [24] 24 25 26 27 28 29 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esse comando é uma forma simplificada de criar um vetor de inteiros de 1 a 30.
Os números que aparecem entre colchetes ([1] e [24]) indicam o índice do primeiro elemento impresso nessa linha.&lt;/p&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Quando compilamos?
&lt;/p&gt;
&lt;p&gt;
Quem vem de linguagens como o C ou Java espera que seja necessário compilar o código em texto para o código de máquinas (geralmente um código binário). No R, isso não é necessário. O R é uma linguagem de programação dinâmica que interpreta o seu código enquanto você o executa.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Tente jogar no console &lt;code&gt;2 * 2 - (4 + 4) / 2&lt;/code&gt;. Pronto! Com essa simples expressão você já é capaz de imaginar (certeiramente) como pedir ao R para fazer qualquer tipo de operação aritmética. Lição aprendida!&lt;/p&gt;

&lt;p&gt;Além do mais, as operações e suas precedências são mantidas como na matemática, ou seja, divisão e multiplicação são calculadas antes da adição e subtração. E os parênteses nunca são demais!&lt;/p&gt;

&lt;p&gt;Agora que você já conhece o RStudio, digite a expressão &lt;code&gt;2 * 2 - (4 + 4) / 2&lt;/code&gt; no
&lt;strong&gt;console&lt;/strong&gt; e tecle &lt;code&gt;Enter&lt;/code&gt;. Uma outra forma de chamar uma expressão é escrever
o código no &lt;strong&gt;editor&lt;/strong&gt; e teclar &lt;code&gt;Ctrl + Enter&lt;/code&gt; ou &lt;code&gt;Ctrl + R&lt;/code&gt;. Assim, o comando é enviado para o &lt;strong&gt;console&lt;/strong&gt;, onde é diretamente executado.&lt;/p&gt;

&lt;p&gt;Se você digitar um comando incompleto, como &lt;code&gt;5 +&lt;/code&gt;, e apertar &lt;code&gt;Enter&lt;/code&gt;, o R mostrará um &lt;code&gt;+&lt;/code&gt;, o que não tem nada a ver com somar alguma coisa. Isso significa que o R está esperando que você complete o seu comando. Termine o seu comando ou aperte &lt;code&gt;Esc&lt;/code&gt; para recomeçar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 5 -
+ 
+ 5
[1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se você digitar um comando que o R não reconhece, ele retornará uma mensagem de erro. NÃO ENTRE EM PÂNICO! Ele só está avisando que não conseguiu interpretar o comando. Você pode digitar outro comando normalmente em seguida.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 5 % 5
Error: unexpected input in &amp;quot;5 % 5&amp;quot;
&amp;gt; 5 - 5
[1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;pedindo-ajuda&#34;&gt;Pedindo Ajuda&lt;/h2&gt;

&lt;p&gt;No R, há quatro principais entidades para se pedir ajuda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help/documentação do R (comandos &lt;code&gt;help(nome_da_funcao)&lt;/code&gt; ou &lt;code&gt;?nome_da_funcao&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;Coleguinha&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A busca por ajuda é feita preferencialmente, mas não necessariamente, na ordem acima.&lt;/p&gt;

&lt;h3 id=&#34;documentação-do-r&#34;&gt;Documentação do R&lt;/h3&gt;

&lt;p&gt;A documentação do R serve para você aprender a usar uma determinada função.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?mean
help(mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cinco dicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Os exemplos no final são particularmente úteis.&lt;/li&gt;
&lt;li&gt;Atente-se na seção &lt;strong&gt;Usage&lt;/strong&gt; para ter noção de como usar.&lt;/li&gt;
&lt;li&gt;Os parâmetros estão descritos em &lt;strong&gt;Arguments&lt;/strong&gt;. Identifique quais tipos de objetos eles recebem.&lt;/li&gt;
&lt;li&gt;Caso essa função não atenda às suas necessidades, a seção &lt;strong&gt;See Also&lt;/strong&gt; sugere funções relacionadas.&lt;/li&gt;
&lt;li&gt;Alguns pacotes possuem tutorias de uso mais completos. Esses textos são chamados de &lt;code&gt;vignettes&lt;/code&gt; e podem ser acessados com a função &lt;code&gt;vignette(package = &#39;nomeDoPacote&#39;)&lt;/code&gt;. Por exemplo, &lt;code&gt;vignette(package = &#39;dplyr&#39;)&lt;/code&gt;. Depois de ver a lista de artigos, escolha um nome e rode &lt;code&gt;vignette(topic = &#39;nome&#39;, package = &#39;nomeDoPacote&#39;)&lt;/code&gt;. Por exemplo, &lt;code&gt;vignette(topic = &#39;introduction&#39;, package = &#39;dplyr&#39;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;google&#34;&gt;Google&lt;/h3&gt;

&lt;p&gt;Há uma comunidade gigantesca de usuários de R gerando diariamente uma infinidade de conteúdos e discussões. Não raramente, você irá encontrar discussões sobre o seu problema simplesmente jogando o copiar/colar do seu erro no Google. Essa deve ser sua primeira tentativa!&lt;/p&gt;

&lt;p&gt;Exemplo (repare no &amp;lsquo;r&amp;rsquo; adicionado na busca, também ajuda):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;log(&amp;quot;5&amp;quot;)
## Error in log(&amp;quot;5&amp;quot;): non-numeric argument to mathematical function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures/ajuda_google.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;stack-overflow&#34;&gt;Stack Overflow&lt;/h3&gt;

&lt;p&gt;O &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; e o &lt;a href=&#34;http://pt.stackoverflow.com/&#34;&gt;Stack Overflow em Português&lt;/a&gt; são sites de Pergunta e Resposta amplamente utilizados por todas as linguagens de programação, e R é uma delas. Nos EUA, chegam até a usar a reputação dos usuários como diferencial no currículo!&lt;/p&gt;

&lt;p&gt;Provavelmente, o Google lhe indicará uma página deles quando você estiver procurando ajuda. E quando todas as fontes possíveis de ajuda falharem, o Stack Overflow lhe dará o espaço para &lt;strong&gt;criar sua própria pergunta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Um ponto importante:&lt;/strong&gt; como fazer uma &lt;strong&gt;boa&lt;/strong&gt; pergunta no Stack Overflow?&lt;/p&gt;

&lt;p&gt;No site, tem um tutorial com uma lista de boas práticas, &lt;a href=&#34;http://pt.stackoverflow.com/help/how-to-ask&#34;&gt;que se encontra aqui&lt;/a&gt;. Algumas dicas são&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ser conciso;&lt;/li&gt;
&lt;li&gt;ser específico;&lt;/li&gt;
&lt;li&gt;ter mente aberta; e&lt;/li&gt;
&lt;li&gt;ser gentil.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Porém, no caso do R, há outro requisito que vai aumentar muito sua chance de ter uma boa resposta: &lt;strong&gt;exemplinho minimal e reprodutível&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ser &lt;strong&gt;minimal&lt;/strong&gt;: usar bancos de dados menores e utilizar pedaços de códigos apenas suficientes para gerar o seu problema. Não precisa de banco de dados de um milhão de linhas e nem colocar o seu código inteiro para mostrar seu problema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ser &lt;strong&gt;reprodutível&lt;/strong&gt;: o seu código deve rodar fora da sua máquina. Se você não fornecer uma versão do seu problema que rode (ou que imite seu erro), as pessoas vão logo desistir de te ajudar. Por isso, nunca coloque bancos de dados que só você tem acesso. Use bancos de dados que já vem no R ou disponibilize um exemplo (possivelmente anonimizado) em &lt;code&gt;.csv&lt;/code&gt; na web para baixar. E se precisar utilizar funções diferentes, coloque as &lt;code&gt;library&lt;/code&gt;&amp;rsquo;s correspondentes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;instalar-pacotes&#34;&gt;Instalar pacotes&lt;/h2&gt;

&lt;p&gt;O grande trunfo do R são seus pacotes. Assim, fique bastante à vontade para instalar e atualizar muitos e muitos pacotes ao longo da sua experiência com o R.&lt;/p&gt;

&lt;p&gt;Existem três principais maneiras de instalar pacotes. Em ordem de frequência, são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via CRAN (Comprehensive R Archive Network): &lt;code&gt;install.packages(&amp;quot;magrittr&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Via Github: &lt;code&gt;devtools::install_github(&amp;quot;rstudio/shiny&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Via arquivo .zip/.tar.gz: &lt;code&gt;install.packages(&amp;quot;C:/caminho/pacote.zip&amp;quot;, repos = NULL)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;via-cran&#34;&gt;Via CRAN&lt;/h3&gt;

&lt;p&gt;Instale pacotes que não estão na sua biblioteca usando a função &lt;code&gt;install.packages(&amp;quot;nome_do_pacote&amp;quot;)&lt;/code&gt;. Por exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;magrittr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E, de agora em diante, basta carregar o pacote com &lt;code&gt;library(magrittr)&lt;/code&gt;. Não precisa mais instalar.&lt;/p&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Dica!
&lt;/p&gt;
&lt;p&gt;
Escreva `nome_do_pacote::nome_da_funcao()` se quiser usar apenas uma função de um determinado pacote. O operador `::` serve para isso. Essa forma também é útil quando se tem duas funções com o mesmo nome, e precisamos garantir que o código vá usar a função do pacote correto.
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;via-github&#34;&gt;Via Github&lt;/h3&gt;

&lt;p&gt;Desenvolvedores costumam disponibilizar a última versão de seus pacotes no Github, e alguns deles sequer estão no CRAN. Mesmo assim ainda é possível utilizá-los instalando diretamente pelo github. O comando é igualmente simples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;rstudio/shiny&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apenas será necessário o username e o nome do repositório. No exemplo, o username foi &amp;ldquo;rstudio&amp;rdquo; e o pacote foi &amp;ldquo;shiny&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Não se preocupe! Os pacotes disponibilizados no github geralmente têm um &lt;code&gt;README&lt;/code&gt; cuja primeira instrução é sobre a instalação. Se não tiver, provavelmente este pacote não te merece! =)&lt;/p&gt;

&lt;h3 id=&#34;via-arquivo-zip-tar-gz&#34;&gt;Via arquivo .zip/.tar.gz&lt;/h3&gt;

&lt;p&gt;Se você precisar instalar um pacote que está zipado no seu computador (ou em algum servidor), utilize o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;C:/caminho/para/o/arquivo/zipapo/pacote.zip&amp;quot;, repos = NULL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É semelhante a instalar pacotes via CRAN, com a diferença que agora o nome do pacote é o caminho inteiro até o arquivo. O parâmetro &lt;code&gt;repos = NULL&lt;/code&gt; informa que estamos instalando a partir da máquina local.&lt;/p&gt;

&lt;p&gt;A aba &lt;strong&gt;&lt;em&gt;Packages&lt;/em&gt;&lt;/strong&gt; do RStudio também ajuda a administrar os seus pacotes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;figures/instalar_pacote_rstudio.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controles-de-fluxo&#34;&gt;Controles de Fluxo&lt;/h2&gt;

&lt;p&gt;Como toda boa linguagem de programação, o R possui estruturas de &lt;code&gt;if&lt;/code&gt;&amp;rsquo;s, &lt;code&gt;else&lt;/code&gt;&amp;rsquo;s, &lt;code&gt;for&lt;/code&gt;&amp;rsquo;s, &lt;code&gt;while&lt;/code&gt;&amp;rsquo;s etc. Esses &lt;strong&gt;controles de fluxo&lt;/strong&gt; são importantes na hora de programar.&lt;/p&gt;

&lt;h3 id=&#34;if-e-else&#34;&gt;IF e ELSE&lt;/h3&gt;

&lt;p&gt;O seguinte trecho de código só será executado se o objeto &lt;code&gt;x&lt;/code&gt; for igual a 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 2
if(x == 1) {
  print(&amp;quot;oi&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 1
if(x == 1) {
  print(&amp;quot;oi&amp;quot;)
}
## [1] &amp;quot;oi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O R só vai executar o que está na expressão dentro das chaves &lt;code&gt;{}&lt;/code&gt; se o que estiver dentro dos parênteses &lt;code&gt;()&lt;/code&gt; retornar &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A sintaxe com o &lt;code&gt;else&lt;/code&gt; e o &lt;code&gt;if else&lt;/code&gt; é&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(&amp;lt;condição1&amp;gt;) {
  
} else if (&amp;lt;condição2&amp;gt;) {
  
} else if (&amp;lt;condição3&amp;gt;) {
  
} else {
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Diferença entre SQL e R nas comparações lógicas
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Igualdade&lt;/b&gt; no SQL é só um sinal de igual: &lt;2 = 1. No R são dois: 2 == 1.
&lt;br&gt;
&lt;b&gt;Diferença&lt;/b&gt; O teste de diferente no R é != ao invés de de &lt;&gt;.
&lt;br&gt;
&lt;b&gt;Negação&lt;/b&gt; ao invés de usar a palavra &#34;not&#34; igual ao SQL, usamos !. Por exemplo, &#34;entidade_id not in (&#39;100515&#39;)&#34; fica &#34;!entidade_id %in% c(&#39;100515&#39;)&#34;.
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;for&#34;&gt;for&lt;/h3&gt;

&lt;p&gt;Sintaxe do &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for(contador in 1:5){
  # várias coisas...
  print(contador)
}
## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Outro exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- 30:35
indices &amp;lt;- seq_along(vetor)
for(i in indices){
  print(vetor[1:i] / 2)
}
## [1] 15
## [1] 15.0 15.5
## [1] 15.0 15.5 16.0
## [1] 15.0 15.5 16.0 16.5
## [1] 15.0 15.5 16.0 16.5 17.0
## [1] 15.0 15.5 16.0 16.5 17.0 17.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No trecho de código acima, preste atenção no resultado individual de cada uma das operações para entender como o R funciona.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- 1
a
## [1] 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O R te permite salvar dados dentro de um objeto.&lt;/p&gt;

&lt;p&gt;No exemplo acima, salvamos o valor &lt;code&gt;1&lt;/code&gt; em &lt;code&gt;a&lt;/code&gt;, e sempre que o R encontrar o nome &lt;code&gt;a&lt;/code&gt; ele vai substituir por &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Atenção!
&lt;/p&gt;
&lt;p&gt;
O R entende letras maiúsculas e minúsculas, isto é &lt;b&gt;a&lt;/b&gt; é considerado um objeto diferente de &lt;b&gt;A&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;objetos-atômicos&#34;&gt;Objetos atômicos&lt;/h3&gt;

&lt;p&gt;Existem cinco classes básicas ou &amp;ldquo;atômicas&amp;rdquo; no R:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;character &lt;code&gt;&amp;quot;UAH!&amp;quot;&lt;/code&gt; (é o varchar do SQL)&lt;/li&gt;
&lt;li&gt;numeric &lt;code&gt;0.95&lt;/code&gt; (números reais)&lt;/li&gt;
&lt;li&gt;integer &lt;code&gt;100515&lt;/code&gt; (inteiros)&lt;/li&gt;
&lt;li&gt;complex &lt;code&gt;2 + 5i&lt;/code&gt; (números complexos, a + bi)&lt;/li&gt;
&lt;li&gt;logical &lt;code&gt;TRUE&lt;/code&gt; (booleanos, TRUE/FALSE)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vetores&#34;&gt;Vetores&lt;/h3&gt;

&lt;p&gt;Vetores no R são os objetos mais simples que podem guardar objetos atômicos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(1, 2, 3, 4)
class(vetor)
## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De forma bastante intuitiva, você pode fazer operações com vetores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor - 1
## [1] 0 1 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quando você faz &lt;code&gt;vetor - 1&lt;/code&gt;, o R subtrai &lt;code&gt;1&lt;/code&gt; de cada um dos elementos do vetor. O mesmo acontece quando você faz qualquer operação aritmética com vetores no R. Tente jogar o código abaixo no console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor / 2
vetor * 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Você também pode fazer operações que envolvem mais de um vetor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * vetor
## [1]  1  4  9 16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neste caso, o R irá alinhar os dois vetores e multiplicar elemento por elemento. Isso pode ficar um pouco confuso quando os dois vetores não possuem o mesmo tamanho:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor2 &amp;lt;- 1:3
vetor * vetor2
## Warning in vetor * vetor2: longer object length is not a multiple of
## shorter object length
## [1] 1 4 9 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora o R alinhou os dois vetores. Como eles não possuíam o mesmo tamanho, foi repetindo o vetor menor até completar o vetor maior.&lt;/p&gt;

&lt;p&gt;Esse comportamento é chamado de &lt;strong&gt;reciclagem&lt;/strong&gt; e é útil para fazer operações &lt;em&gt;elemento por elemento&lt;/em&gt; (vetorizadamente), mas às vezes pode ser confuso. Com o tempo, você aprenderá a se aproveitar dele.&lt;/p&gt;

&lt;h3 id=&#34;misturando-objetos&#34;&gt;Misturando objetos&lt;/h3&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Vetores são homogêneos
&lt;/p&gt;
&lt;p&gt;
Os elementos de um vetor são sempre da mesma classe. Ou todos são numéricos, ou são todos character, ou todos são lógicos etc. Não dá para ter um número e um character no mesmo vetor, por exemplo.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Se colocarmos duas ou mais classes diferentes dentro de um mesmo vetor, o R vai forçar que todos os elementos passem a pertencer à mesma classe. O número &lt;code&gt;1.7&lt;/code&gt; viraria &lt;code&gt;&amp;quot;1.7&amp;quot;&lt;/code&gt; se fosse colocado ao lado de um &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- c(1.7, &amp;quot;a&amp;quot;)  ## character
y &amp;lt;- c(TRUE, 2)   ## numeric
y &amp;lt;- c(TRUE, &amp;quot;a&amp;quot;) ## character
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ordem de precedência é:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DOMINANTE&lt;/strong&gt; &lt;code&gt;character &amp;gt; complex &amp;gt; numeric &amp;gt; integer &amp;gt; logical&lt;/code&gt; &lt;strong&gt;RECESSIVO&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;forçando-classes-explicitamente&#34;&gt;Forçando classes explicitamente&lt;/h3&gt;

&lt;p&gt;Assim como o &lt;code&gt;convert()&lt;/code&gt; do SQL faz, você pode coagir um objeto a ser de uma classe da sua escolha com as funções &lt;code&gt;as.character()&lt;/code&gt;, &lt;code&gt;as.numeric()&lt;/code&gt;, &lt;code&gt;as.integer()&lt;/code&gt; e &lt;code&gt;as.logical()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 0:4
class(x)
## [1] &amp;quot;integer&amp;quot;
as.numeric(x)
## [1] 0 1 2 3 4
as.logical(x)
## [1] FALSE  TRUE  TRUE  TRUE  TRUE
as.character(x)
## [1] &amp;quot;0&amp;quot; &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se o R não entender como coagir uma classe na outra, ele soltará um &lt;code&gt;warning&lt;/code&gt; informado que colocou &lt;code&gt;NA&lt;/code&gt; no lugar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)
as.numeric(x)
## Warning: NAs introduced by coercion
## [1] NA NA NA
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Observação
&lt;/p&gt;
&lt;p&gt;
O &lt;b&gt;NA&lt;/b&gt; tem o mesmo papel que o &lt;b&gt;null&lt;/b&gt; do SQL. Porém, há um &lt;b&gt;NULL&lt;/b&gt; no R também, com diferenças sutis que vamos abordar mais adiante. Não confundir!
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;matrizes&#34;&gt;Matrizes&lt;/h3&gt;

&lt;p&gt;Matrizes são vetores com duas dimensões (e por isso só possuem elementos de uma mesma classe).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(1:6, nrow = 2, ncol = 3)
m
##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
dim(m) # funçăo dim() retorna a dimensăo do objeto.
## [1] 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repare que os números de 1 a 6 foram dispostos na matriz coluna por coluna (&lt;em&gt;column-wise&lt;/em&gt;), ou seja, preenchendo de cima para baixo e depois da esquerda para a direita.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Utilidades&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m[3,  ]   # seleciona uma linha
m[ , 2]   # seleciona uma coluna
m[1, 2]   # seleciona um elemento
t(m)      # matriz transposta
m %*% n   # multiplicação matricial
solve(m)  # matriz inversa
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fatores&#34;&gt;Fatores&lt;/h3&gt;

&lt;p&gt;Fatores podem ser vistos como vetores de inteiros que possuem rótulos (labels).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sexo &amp;lt;- c(&amp;quot;M&amp;quot;, &amp;quot;H&amp;quot;, &amp;quot;H&amp;quot;, &amp;quot;H&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;H&amp;quot;)
fator &amp;lt;- as.factor(sexo)
fator
## [1] M H H H M M H
## Levels: H M
as.numeric(fator)
## [1] 2 1 1 1 2 2 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eles são úteis para representar uma variável categórica (nominal e ordinal). Na modelagem, eles serão tratados de maneira especial em funções como &lt;code&gt;lm()&lt;/code&gt; e &lt;code&gt;glm()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A função &lt;code&gt;levels()&lt;/code&gt; retorna os rótulos do fator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;levels(fator)
## [1] &amp;quot;H&amp;quot; &amp;quot;M&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ordem das categorias de um fator pode importar. Como exemplo, temos as caselas de referência de modelos estatísticos e a ordem das barras de um gráfico. Para ajudar nesta tarefa, consulte o pacote &lt;a href=&#34;https://github.com/tidyverse/forcats&#34;&gt;forcats&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Um erro comum e desastroso
&lt;/p&gt;
&lt;p&gt;
Quando um vetor de números está como &lt;b&gt;factor&lt;/b&gt;, ao tentar transformar o vetor em &lt;b&gt;numeric&lt;/b&gt;, você receberá um vetor de inteiros que não tem nada a ver com os valores originais!
&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;numeros &amp;lt;- factor(c(&amp;quot;10&amp;quot;, &amp;quot;55&amp;quot;, &amp;quot;55&amp;quot;, &amp;quot;12&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;-5&amp;quot;, &amp;quot;-90&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;as.numeric(numeros)
## [1] 3 5 5 4 3 1 2    # &amp;lt;-- Por essa eu năo esperava!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para evitar isso, use &lt;code&gt;as.character()&lt;/code&gt; antes de transformar para número.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;as.numeric(as.character(numeros))
## [1]  10  55  55  12  10  -5 -90   # &amp;lt;-- Agora está OK
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;valores-especiais&#34;&gt;Valores especiais&lt;/h3&gt;

&lt;p&gt;Existem valores reservados para representar dados faltantes, infinitos, e indefinições matemáticas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NA&lt;/strong&gt; (Not Available) significa dado faltante/indisponível. É o &lt;code&gt;null&lt;/code&gt; do SQL ou o &lt;code&gt;.&lt;/code&gt; do SAS. O &lt;code&gt;NA&lt;/code&gt; tem uma classe, ou seja, podemos ter &lt;code&gt;NA&lt;/code&gt; numeric, &lt;code&gt;NA&lt;/code&gt; character etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NaN&lt;/strong&gt; (Not a Number) representa indefinições matemáticas, como &lt;code&gt;0/0&lt;/code&gt; e &lt;code&gt;log(-1)&lt;/code&gt;. Um &lt;code&gt;NaN&lt;/code&gt; é um &lt;code&gt;NA&lt;/code&gt;, mas a recíproca não é verdadeira.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inf&lt;/strong&gt; (Infinito) é um número muito grande ou o limite matemático, por exemplo, &lt;code&gt;1/0&lt;/code&gt; e &lt;code&gt;10^310&lt;/code&gt;. Aceita sinal negativo &lt;code&gt;-Inf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NULL&lt;/strong&gt; representa a ausência de informação. Conceitualmente, a diferença entre &lt;code&gt;NA&lt;/code&gt; e &lt;code&gt;NULL&lt;/code&gt; é sutil, mas, no R, o &lt;code&gt;NA&lt;/code&gt; está mais alinhado com os conceitos de estatística (ou como gostaríamos que os dados faltantes se comportassem em análise de dados) e o &lt;code&gt;NULL&lt;/code&gt; está em sintonia com comportamentos de lógica de programação.&lt;/li&gt;
&lt;li&gt;Use as funções &lt;code&gt;is.na()&lt;/code&gt;, &lt;code&gt;is.nan()&lt;/code&gt;, &lt;code&gt;is.infinite()&lt;/code&gt; e &lt;code&gt;is.null()&lt;/code&gt; para testar se um objeto é um desses valores.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(NaN, Inf, 1, 2, 3, NA)
is.na(x)
## [1]  TRUE FALSE FALSE FALSE FALSE  TRUE
is.nan(x)
## [1]  TRUE FALSE FALSE FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;

&lt;p&gt;Listas são um tipo especial de vetor que aceita elementos de classes diferentes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- list(1:5, &amp;quot;Z&amp;quot;, TRUE, c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;))
x
## [[1]]
## [1] 1 2 3 4 5
## 
## [[2]]
## [1] &amp;quot;Z&amp;quot;
## 
## [[3]]
## [1] TRUE
## 
## [[4]]
## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É um dos objetos mais importantes para armazenar dados e vale a pena saber manuseá-los bem. Existem muitas funções que fazem das listas objetos incrivelmente úteis.&lt;/p&gt;

&lt;p&gt;Criamos uma lista pela função &lt;code&gt;list()&lt;/code&gt;, que aceita um número arbitrário de elementos. Listas aceitam QUALQUER tipo de objeto. Podemos ter listas dentro de listas, por exemplo. Como para quase todos os objetos no R, as funções &lt;code&gt;is.list()&lt;/code&gt; e &lt;code&gt;as.list()&lt;/code&gt; também existem.&lt;/p&gt;

&lt;p&gt;Na lista &lt;code&gt;pedido&lt;/code&gt; abaixo, temos &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;character&lt;/code&gt;, vetor de &lt;code&gt;character&lt;/code&gt; e &lt;code&gt;list&lt;/code&gt; contida em uma lista:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pedido &amp;lt;- list(pedido_id = 8001406,
               pedido_registro = as.Date(&amp;quot;2016-12-12&amp;quot;),
               nome = &amp;quot;Athos&amp;quot;, 
               sobrenome = &amp;quot;Petri Damiani&amp;quot;, 
               cpf = &amp;quot;12345678900&amp;quot;, 
               email = &amp;quot;athos.damiani@gmail.com&amp;quot;, 
               qualidades = c(&amp;quot;incrível&amp;quot;, &amp;quot;impressionante&amp;quot;),
               itens = list(
                 list(descricao = &amp;quot;Ferrari&amp;quot;, 
                      frete = 0, 
                      valor = 500000),
                 list(descricao = &amp;quot;Dolly&amp;quot;, 
                      frete = 1.5, 
                      valor = 3.90)
               ), 
               endereco = list(entrega = list(logradouro = &amp;quot;Rua da Glória&amp;quot;, 
                                              numero = &amp;quot;123&amp;quot;,
                                              complemento = &amp;quot;apto 71&amp;quot;),
                               cobranca = list(logradouro = &amp;quot;Rua Jose de Oliveira Coutinho&amp;quot;,
                                               numero = &amp;quot;151&amp;quot;,
                                               complemento = &amp;quot;5o andar&amp;quot;)
               )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Utilidades&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pedido$cpf     # elemento chamado &#39;cpf&#39;
pedido[1]      # nova lista com apenas o primeiro elemento
pedido[[2]]    # segundo elemento
pedido[&amp;quot;nome&amp;quot;] # nova lista com apenas o elemento chamado &#39;nome&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Certamente você se deparará com listas quando for fazer análise de dados com o R. Nos tópicos mais aplicados, iremos aprofundar sobre o tema. O pacote &lt;a href=&#34;https://github.com/hadley/purrr&#34;&gt;purrr&lt;/a&gt; contribui com funcionalidades incríveis para listas.&lt;/p&gt;

&lt;h3 id=&#34;data-frame&#34;&gt;data.frame&lt;/h3&gt;

&lt;p&gt;Um &lt;code&gt;data.frame&lt;/code&gt; é o mesmo que uma tabela do SQL ou um spreadsheet do Excel, por isso são objetos muito importantes.&lt;/p&gt;

&lt;p&gt;Usualmente, seus dados serão importados para um objeto &lt;code&gt;data.frame&lt;/code&gt;. Em grande parte do curso, eles serão o principal objeto de estudo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data.frame&lt;/code&gt;&amp;rsquo;s são listas especiais em que todos os seus elementos possuem &lt;strong&gt;o mesmo comprimento&lt;/strong&gt;. Cada elemento dessa lista pode ser pensado como uma coluna da tabela. Seu comprimento representa o número de linhas.&lt;/p&gt;

&lt;p&gt;Já que são listas, essas colunas podem ser de classes diferentes. Essa é a grande diferença entre &lt;code&gt;data.frame&lt;/code&gt;&amp;rsquo;s e matrizes. Algumas funções úteis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head()&lt;/code&gt; - Mostra as primeiras 6 linhas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail()&lt;/code&gt; - Mostra as últimas 6 linhas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim()&lt;/code&gt; - Número de linhas e de colunas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;names()&lt;/code&gt; - Os nomes das colunas (variáveis).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; - Estrutura do data.frame. Mostra, entre outras coisas, as classes de cada coluna.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cbind()&lt;/code&gt; - Acopla duas tabelas lado a lado.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rbind()&lt;/code&gt; - Empilha duas tabelas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O exemplo abaixo mostra que uma lista pode virar &lt;code&gt;data.frame&lt;/code&gt; se todos os elementos tiverem o mesmo comprimento.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minha_lista &amp;lt;- list(x = c(1, 2, 3), y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;))
as.data.frame(minha_lista)
## Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, : arguments imply differing number of rows: 3, 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minha_lista &amp;lt;- list(x = c(1, 2, 3), y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))
as.data.frame(minha_lista)
##   x y
## 1 1 a
## 2 2 b
## 3 3 c
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;exemplo-de-data-frame-iris&#34;&gt;Exemplo de data.frame: iris {-}&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(iris)  
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa
str(iris)
## &#39;data.frame&#39;:	150 obs. of  5 variables:
##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
##  $ Species     : Factor w/ 3 levels &amp;quot;setosa&amp;quot;,&amp;quot;versicolor&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;O R vem com muitas funções implementadas com as quais você pode fazer muitas  tarefas complicadas, como gerar números aleatórios. Geralmente, o nome das funções é bem intuitivo, por exemplo, &lt;code&gt;mean&lt;/code&gt; é a função que calcula a média, &lt;code&gt;round&lt;/code&gt; é a função que arredonda um número etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(5.634)
## [1] 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para entender melhor o funcionamento das funções no R, considere o seguinte exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;die &amp;lt;- 1:6
round(mean(die))
## [1] 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A ilustração abaixo mostra o que acontece quando você executa &lt;code&gt;round(mean(die))&lt;/code&gt; no R.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;figures/round.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Passamos dados para as funções por meio de argumentos. No R, esses argumentos estão documentados na página de ajuda de cada uma das funções, que pode ser acessada digitando &lt;code&gt;help(nome_da_funcao)&lt;/code&gt; ou &lt;code&gt;?nome_da_funcao&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;criando-suas-próprias-funções&#34;&gt;Criando suas próprias funções&lt;/h3&gt;

&lt;p&gt;Sintaxe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;soma &amp;lt;- function(x, y = 0) {
  resposta &amp;lt;- x + y
  return(resposta)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A função acima tem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o nome &lt;code&gt;soma&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;os argumentos &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;o corpo &lt;code&gt;resposta &amp;lt;- x + y&lt;/code&gt;; e&lt;/li&gt;
&lt;li&gt;o valor padrão &lt;code&gt;0&lt;/code&gt; para o argumento &lt;code&gt;y&lt;/code&gt; (&lt;code&gt;y = 0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use-a como qualquer outra função:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;soma(2, 1) # soma de 2 + 1
## [1] 3
soma(2) # soma de 2 + 0
## [1] 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O argumento &lt;code&gt;y&lt;/code&gt; possui o valor padrão &lt;code&gt;0&lt;/code&gt;. Isso quer dizer que ele valerá zero caso o usuário não passe um valor explicitamente.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://adv-r.had.co.nz/&#34;&gt;Advanced-R&lt;/a&gt; é um excelente livro para quem quiser masterizar a arte de se fazer funções.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;gráficos-base&#34;&gt;Gráficos (base)&lt;/h2&gt;

&lt;p&gt;O R já vem com funções básicas que fazem gráficos estatísticos de todas as naturezas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vantagens: são rápidas e simples.&lt;/li&gt;
&lt;li&gt;Desvantagens: são feias e difíceis para gerar gráficos complexos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gráfico-de-dispersão&#34;&gt;Gráfico de dispersão&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Funçăo&lt;/strong&gt; &lt;code&gt;plot()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parâmetros principais (ver &lt;code&gt;help(hist)&lt;/code&gt; para mais detalhes):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; - Vetores para representarem os eixos x e y.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; -  Tipo de gráfico. Pode ser pontos, linhas, escada etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#39;admonition note&#39;&gt;
&lt;p class=&#39;admonition-title&#39;&gt;
Atenção!
&lt;/p&gt;
&lt;p&gt; 
Além de gerar gráficos de dispersão, tentar chamar a função &lt;b&gt;plot(objeto_diferentao)&lt;b&gt; para qualquer tipo de objeto do R geralmente sai um gráfico interessante! Sempre tente fazer isso, a menos que seu objeto seja um &lt;b&gt;data.frame&lt;b&gt; com milhares de colunas!!!
&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n &amp;lt;- 100
x &amp;lt;- 1:n
y &amp;lt;- 5 + 2 * x + rnorm(n, sd = 30)
plot(x, y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-58-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-58&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O parâmetro &lt;code&gt;type = &amp;quot;l&amp;quot;&lt;/code&gt; indica que queremos que os pontos sejam interligados por linhas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(x, y, type = &amp;quot;l&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-59-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-59&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;histograma&#34;&gt;Histograma&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Funçăo&lt;/strong&gt; &lt;code&gt;hist()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parâmetros principais (ver &lt;code&gt;help(hist)&lt;/code&gt; para mais detalhes):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; - O vetor numérico pra histogramar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;breaks&lt;/code&gt; - O número (aproximado) de retângulos.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(rnorm(1000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-60-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-60&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;boxplot&#34;&gt;Boxplot&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Função&lt;/strong&gt; &lt;code&gt;boxplot()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parâmetros principais (ver &lt;code&gt;help(boxplot)&lt;/code&gt; para mais detalhes):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uma variável&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(InsectSprays$count, col = &amp;quot;lightgray&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-61-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-61&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duas variáveis&lt;/strong&gt; - Usamos fórmula e o parâmetro &lt;code&gt;data&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(count ~ spray, data = InsectSprays, col = &amp;quot;lightgray&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-62-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-62&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;gráfico-de-barras&#34;&gt;Gráfico de barras&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Função&lt;/strong&gt; &lt;code&gt;table()&lt;/code&gt;, &lt;code&gt;barplot()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Primeiro crie uma tabela de frequências (ou qualquer outro sumário). Então crie o gráfico com &lt;code&gt;barplot()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tabela com uma variável&lt;/strong&gt; usando &lt;code&gt;table()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(diamonds, package = &amp;quot;ggplot2&amp;quot;)
tabela &amp;lt;- table(diamonds$color)
tabela
## 
##     D     E     F     G     H     I     J 
##  6775  9797  9542 11292  8304  5422  2808
barplot(tabela)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-63-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-63&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tabela com duas variáveis&lt;/strong&gt; em uma tabela de dupla entrada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;VADeaths
##       Rural Male Rural Female Urban Male Urban Female
## 50-54       11.7          8.7       15.4          8.4
## 55-59       18.1         11.7       24.3         13.6
## 60-64       26.9         20.3       37.0         19.3
## 65-69       41.0         30.9       54.6         35.1
## 70-74       66.0         54.3       71.1         50.0
barplot(VADeaths) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figures//unnamed-chunk-64-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-64&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fórmulas&#34;&gt;Fórmulas&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;formula &amp;lt;- y ~ x1 + x2
class(formula)
## [1] &amp;quot;formula&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fórmulas são coisas do tipo &lt;code&gt;y ~ x&lt;/code&gt;. As funções as usam de maneiras diversas, mas o exemplo mais emblemático vem da modelagem estatística.&lt;/p&gt;

&lt;p&gt;A função &lt;code&gt;lm()&lt;/code&gt; é a que ajusta uma regressão linear no R, e &lt;code&gt;lm(y ~ x)&lt;/code&gt; lê-se &amp;ldquo;regressão linear de y explicada por x&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;minha_formula &amp;lt;- Sepal.Width ~ Petal.Length + Petal.Width
class(minha_formula)
## [1] &amp;quot;formula&amp;quot;
lm(minha_formula, data = iris)
## 
## Call:
## lm(formula = minha_formula, data = iris)
## 
## Coefficients:
##  (Intercept)  Petal.Length   Petal.Width  
##       3.5870       -0.2571        0.3640
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No caso específico das regressões lineares, são nas fórmulas que conseguimos descrever as variáveis explicativas e suas interações. A fórmula &lt;code&gt;y ~ x1 * x2&lt;/code&gt; significa &amp;ldquo;y regredido por x1, x2 e a interação entre x1 e x2&amp;rdquo;. Fórmulas aparecem frequentemente em tarefas de modelagem.&lt;/p&gt;

&lt;p&gt;Demais usos de fórmulas aparecerão em outras funções (como o &lt;code&gt;ggplot&lt;/code&gt;) com outros significados, e a documentação nos dirá como usá-las.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;miscelâneas&#34;&gt;Miscelâneas&lt;/h2&gt;

&lt;h3 id=&#34;vetor-de-letras-do-alfabeto&#34;&gt;Vetor de letras do alfabeto&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;letters
##  [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; &amp;quot;e&amp;quot; &amp;quot;f&amp;quot; &amp;quot;g&amp;quot; &amp;quot;h&amp;quot; &amp;quot;i&amp;quot; &amp;quot;j&amp;quot; &amp;quot;k&amp;quot; &amp;quot;l&amp;quot; &amp;quot;m&amp;quot; &amp;quot;n&amp;quot; &amp;quot;o&amp;quot; &amp;quot;p&amp;quot; &amp;quot;q&amp;quot;
## [18] &amp;quot;r&amp;quot; &amp;quot;s&amp;quot; &amp;quot;t&amp;quot; &amp;quot;u&amp;quot; &amp;quot;v&amp;quot; &amp;quot;w&amp;quot; &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;
LETTERS
##  [1] &amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot; &amp;quot;D&amp;quot; &amp;quot;E&amp;quot; &amp;quot;F&amp;quot; &amp;quot;G&amp;quot; &amp;quot;H&amp;quot; &amp;quot;I&amp;quot; &amp;quot;J&amp;quot; &amp;quot;K&amp;quot; &amp;quot;L&amp;quot; &amp;quot;M&amp;quot; &amp;quot;N&amp;quot; &amp;quot;O&amp;quot; &amp;quot;P&amp;quot; &amp;quot;Q&amp;quot;
## [18] &amp;quot;R&amp;quot; &amp;quot;S&amp;quot; &amp;quot;T&amp;quot; &amp;quot;U&amp;quot; &amp;quot;V&amp;quot; &amp;quot;W&amp;quot; &amp;quot;X&amp;quot; &amp;quot;Y&amp;quot; &amp;quot;Z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;operadores-aritméticos&#34;&gt;Operadores aritméticos&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Operador&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x + y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Adição de x com y.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x - y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Subtração de y em x.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x * y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Multiplicaçăo de x e y.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x / y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Divisão de x por y.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x^y ou x**y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x elevado a y-ésima potência.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x%%y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Resto da divisão de x por y (módulo).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x%/%y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Parte inteira da divisão de x por y.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;operadores-lógicos&#34;&gt;Operadores lógicos&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Operador&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;lt; y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x menor que y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;lt;= y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x menor ou igual a y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;gt; y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x maior que y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;gt;= y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x maior ou igual a y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x == y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x igual a y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x != y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x diferente de y?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;!x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Negativa de x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;#124; y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x ou y são verdadeiros?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;x &amp;amp; y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x e y são verdadeiros?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;xor(x, y)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x ou y são verdadeiros (apenas um deles)?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;script src=&#34;https://cdn.datacamp.com/datacamp-light-latest.min.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://cdn.datacamp.com/datacamp-light-latest.min.js&#34;&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Calcule o número de ouro no R.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$$ \frac{1 + \sqrt{5}}{2} $$&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIERpZ2l0ZSBhIGV4cHJlc3NcdTAwZTNvIHF1ZSBjYWxjdWxhIG8gblx1MDBmYW1lcm8gZGUgb3Vyby4iLCJzb2x1dGlvbiI6IiMgRGlnaXRlIGEgZXhwcmVzc1x1MDBlM28gcXVlIGNhbGN1bGEgbyBuXHUwMGZhbWVybyBkZSBvdXJvLlxuKDEgKyBzcXJ0KDUpKS8yIiwic2N0IjoidGVzdF9vdXRwdXRfY29udGFpbnMoXCIxLjYxODAzNFwiLCBpbmNvcnJlY3RfbXNnID0gXCJUZW0gY2VydGV6YSBkZSBxdWUgaW5kaWNvdSBhIGV4cHJlc3NcdTAwZTNvIGNvcnJldGFtZW50ZT9cIilcbnN1Y2Nlc3NfbXNnKFwiQ29ycmV0byFcIikifQ==&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;O que dá divisão de 1 por 0 no R? E -1 por 0?&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIgMS8wXG4tMS8wIiwic2N0IjoidGVzdF9vdXRwdXRfY29udGFpbnMoXCJJbmZcIiwgaW5jb3JyZWN0X21zZyA9IFwiVGVtIGNlcnRlemEgZGUgcXVlIGluZGljb3UgYSBleHByZXNzXHUwMGUzbyBjb3JyZXRhbWVudGU/XCIpXG50ZXN0X291dHB1dF9jb250YWlucyhcIi1JbmZcIiwgaW5jb3JyZWN0X21zZyA9IFwiVGVtIGNlcnRlemEgZGUgcXVlIGluZGljb3UgYSBleHByZXNzXHUwMGUzbyBjb3JyZXRhbWVudGU/XCIpXG5zdWNjZXNzX21zZyhcIkNvcnJldG8hXCIpIn0=&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Quais as diferenças entre &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;NA&lt;/code&gt; e &lt;code&gt;Inf&lt;/code&gt;? Digite expressões que
retornam cada um desses resultados.&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIE5hTlxuXG4jIE5VTExcblxuIyBOQVxuXG4jIEluZlxuIiwic29sdXRpb24iOiIjIE5hTiBcdTAwZTkgbyByZXN1bHRhZG8gZGUgdW1hIG9wZXJhXHUwMGU3XHUwMGUzbyBtYXRlbVx1MDBlMXRpY2EgaW52XHUwMGUxbGlkYS4gU2lnbmlmaWNhIE5vdCBBIE51bWJlclxuMC8wXG4jIE5VTEwgXHUwMGU5IG8gdmF6aW8gZG8gUi4gXHUwMGM5IGNvbW8gc2UgbyBvYmpldG8gblx1MDBlM28gZXhpc3Rpc3NlXG5OVUxMXG5hID0gTlVMTFxuaXMubnVsbChpbnRlZ2VyKGxlbmd0aCA9IDApKSAjIHZlamEgcXVlIHVtIHZldG9yLCBtZXNtbyBzZW0gZWxlbWVudG9zIG5cdTAwZTNvIFx1MDBlOSBOVUxMXG4jIE5BIFx1MDBlOSB1bWEgY29uc3RhbnRlIGxcdTAwZjNnaWNhIGRvIFIuIFNpZ2luaWZpY2EgTm90IEF2YWlsbGFibGUuIE5BIHBvZGUgc2VyIFxuIyBjb252ZXJ0aWRvIHBhcmEgcXVhc2UgdG9kb3Mgb3MgdGlwb3MgZGUgdmV0b3JlcyBkbyBSLiBcdTAwYzkgdXNhZG8gcHJpbmNpcGFsbWVudGUgcGFyYVxuIyBpbmRpY2FyIHZhbG9yZXMgZmFsdGFudGVzLlxuTkFcbiMgSW5mIFx1MDBlOSBzaWduaWZpY2EgaW5maW5pdG8uIFx1MDBjOSBvIHJlc3VsdGFkbyBkZSBvcGVyYVx1MDBlN1x1MDBmNWVzIG1hdGVtXHUwMGUxdGljYXMgY3VqbyBsaW1pdGUgXHUwMGU5IGluZmluaXRvLlxuMS8wXG4xL0luZiJ9&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tente mentalmente calcular o que dá a conta &lt;code&gt;5 + 3 * 10 %/% 3 == 15&lt;/code&gt; no R, sem rodar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adicionando apenas parênteses, faça a expressão acima retornar o resultado contrário.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiI1ICsgMyAqIDEwICUvJSAzID09IDE1Iiwic29sdXRpb24iOiI1ICsgKDMgKiAxMCkgJS8lIDMgPT0gMTUiLCJzY3QiOiJ0ZXN0X291dHB1dF9jb250YWlucyhcIlRSVUVcIiwgaW5jb3JyZWN0X21zZyA9IFwiVGVtIGNlcnRlemEgZGUgcXVlIGluZGljb3UgYSBleHByZXNzXHUwMGUzbyBjb3JyZXRhbWVudGU/XCIpXG5zdWNjZXNzX21zZyhcIkNvcnJldG8hXCIpIn0=&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;O que acontece se você rodar:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 4
if(x = 4) {
  &#39;isso aqui apareceu&#39;
}
x
&lt;/code&gt;&lt;/pre&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIDRcbmlmKHggPSA0KSB7XG4gICdpc3NvIGFxdWkgYXBhcmVjZXUnXG59XG54In0=&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Como você faria para que o código da pergunta anterior fizesse com que &lt;code&gt;&#39;isso aqui apareceu&#39;&lt;/code&gt; fosse impresso no console, mas nenhum erro aparecesse?&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIDRcbmlmKHggPSA0KSB7XG4gICdpc3NvIGFxdWkgYXBhcmVjZXUnXG59XG54Iiwic29sdXRpb24iOiJ4IDwtIDRcbmlmKHggPT0gNCkge1xuICAnaXNzbyBhcXVpIGFwYXJlY2V1J1xufVxueCIsInNjdCI6InRlc3Rfb3V0cHV0X2NvbnRhaW5zKFwiaXNzbyBhcXVpIGFwYXJlY2V1XCIsIGluY29ycmVjdF9tc2cgPSBcIlRlbSBjZXJ0ZXphIGRlIHF1ZSBpbmRpY291IGEgZXhwcmVzc1x1MDBlM28gY29ycmV0YW1lbnRlP1wiKVxudGVzdF9lcnJvcigpXG5zdWNjZXNzX21zZyhcIkNvcnJldG8hXCIpIn0=&lt;/div&gt;

&lt;hr /&gt;

&lt;script src=&#34;https://cdn.datacamp.com/datacamp-light-latest.min.js&#34;&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIoMSArIHNxcnQoNSkpLzIifQ==&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIxLzBcbi0xLzAifQ==&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIE5hTiBcdTAwZTkgbyByZXN1bHRhZG8gZGUgdW1hIG9wZXJhXHUwMGU3XHUwMGUzbyBtYXRlbVx1MDBlMXRpY2EgaW52XHUwMGUxbGlkYS4gU2lnbmlmaWNhIE5vdCBBIE51bWJlclxuMC8wXG4jIE5VTEwgXHUwMGU5IG8gdmF6aW8gZG8gUi4gXHUwMGM5IGNvbW8gc2UgbyBvYmpldG8gblx1MDBlM28gZXhpc3Rpc3NlXG5OVUxMXG5hID0gTlVMTFxuaXMubnVsbChpbnRlZ2VyKGxlbmd0aCA9IDApKSAjIHZlamEgcXVlIHVtIHZldG9yLCBtZXNtbyBzZW0gZWxlbWVudG9zIG5cdTAwZTNvIFx1MDBlOSBOVUxMXG4jIE5BIFx1MDBlOSB1bWEgY29uc3RhbnRlIGxcdTAwZjNnaWNhIGRvIFIuIFNpZ2luaWZpY2EgTm90IEF2YWlsbGFibGUuIE5BIHBvZGUgc2VyIFxuIyBjb252ZXJ0aWRvIHBhcmEgcXVhc2UgdG9kb3Mgb3MgdGlwb3MgZGUgdmV0b3JlcyBkbyBSLiBcdTAwYzkgdXNhZG8gcHJpbmNpcGFsbWVudGUgcGFyYVxuIyBpbmRpY2FyIHZhbG9yZXMgZmFsdGFudGVzLlxuTkFcbiMgSW5mIFx1MDBlOSBzaWduaWZpY2EgaW5maW5pdG8uIFx1MDBjOSBvIHJlc3VsdGFkbyBkZSBvcGVyYVx1MDBlN1x1MDBmNWVzIG1hdGVtXHUwMGUxdGljYXMgY3VqbyBsaW1pdGUgXHUwMGU5IGluZmluaXRvLlxuMS8wXG4xL0luZiJ9&lt;/div&gt;

&lt;p&gt;4.&lt;/p&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiI1ICsgKDMgKiAxMCkgJS8lIDMgPT0gMTUifQ==&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiI+IHggPC0gNFxuPiBpZih4ID0gNCkge1xuRXJybzogJz0nIGluZXNwZXJhZG8gaW4gXCJpZih4ID1cIlxuPiAgICdpc3NvIGFxdWkgYXBhcmVjZXUnXG5bMV0gXCJpc3NvIGFxdWkgYXBhcmVjZXVcIlxuPiB9XG5FcnJvOiAnfScgaW5lc3BlcmFkbyBpbiBcIn1cIlxuPiB4XG5bMV0gNCJ9&lt;/div&gt;

&lt;p&gt;7.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIDRcbmlmKHggPT0gNCkge1xuICAnaXNzbyBhcXVpIGFwYXJlY2V1J1xufVxueCJ9&lt;/div&gt;

&lt;p&gt;8.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJmb3IgKGkgaW4gMTo0KXtcbiAgaWYoaSAlJSAyID09IDApe1xuICAgIHByaW50KHBhc3RlKGksIFwiZWxlZmFudGUocylcIiwgcGFzdGUocmVwKFwiaW5jb21vZGEobSlcIiwgdGltZXMgPSBpKSwgY29sbGFwc2UgPSBcIiBcIiksIFwibXVpdG8gbWFpc1wiKSlcbiAgfSBlbHNlIHtcbiAgIHByaW50KHBhc3RlKGksIFwiZWxlZmFudGUocykgaW5jb21vZGEobSkgbXVpdGEgZ2VudGVcIikpIFxuICB9XG59In0=&lt;/div&gt;

&lt;p&gt;9.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIGMoMSwgMjAsIDQwLCA1MCwgNjApIn0=&lt;/div&gt;

&lt;p&gt;10.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIHJ1bmlmKDEwMCkifQ==&lt;/div&gt;

&lt;p&gt;11.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJtZWFuKHgpIn0=&lt;/div&gt;

&lt;p&gt;12.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ4IDwtIGMocnVuaWYoOTkpLCBOQSlcbm1lYW4oeCwgbmEucm0gPSBUKSJ9&lt;/div&gt;

&lt;p&gt;13.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJtZWRpYSA8LSBmdW5jdGlvbih4KXtcbiAgaSA8LSAxXG4gIHRhbWFuaG8gPC0gbGVuZ3RoKHgpXG4gIHNvbWEgPC0gMFxuICBmb3IoaSBpbiAxOnRhbWFuaG8pe1xuICAgIHNvbWEgPC0gc29tYSArIHhbaV1cbiAgfVxuICByZXR1cm4oc29tYS90YW1hbmhvKVxufSJ9&lt;/div&gt;

&lt;p&gt;14.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJkYWRvIDwtIGZ1bmN0aW9uKCl7XG4gIHNhbXBsZSgxOjYsIDEpXG59In0=&lt;/div&gt;

&lt;p&gt;15.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJzb21hX2RhZG9zIDwtIGZ1bmN0aW9uKG4pe1xuICBzb21hIDwtIDBcbiAgZm9yKGkgaW4gMTpuKXtcbiAgICBzb21hIDwtIHNvbWEgKyBzYW1wbGUoMTo2LCAxKVxuICB9XG4gIHJldHVybihzb21hKVxufSJ9&lt;/div&gt;

&lt;p&gt;16.&lt;/p&gt;

&lt;div data-datacamp-exercise data-height=&#34;300&#34; data-encoded=&#34;true&#34;&gt;eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJyZXN1bHRhZG9zIDwtIGludGVnZXIobGVuZ3RoID0gMTAwMClcbmZvcihpIGluIDE6MTAwMCl7XG4gIHJlc3VsdGFkb3NbaV0gPC0gc29tYV9kYWRvcygzKVxufVxuaGlzdChyZXN1bHRhZG9zKSJ9&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
